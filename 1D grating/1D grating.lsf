#reset project
clear;
newproject;

# Settings/Variables
a = 1e-6;
numFreqPoints = 201;

# Define the unit cell and layer positions
geometry = struct;
geometry.injection_axis = "z-axis";
geometry.x_min = -a/10;
geometry.x_max =  a/10;
geometry.y_min = -a/2;
geometry.y_max =  a/2;
geometry.z_min = -a/2;
geometry.z_max =  a/2;
geometry.layer_positions =  [-a/4,a/4];

# Add geometry
addrect;
set("name", "substrate");
set("x min",geometry.x_min);
set("x max",geometry.x_max);
set("y min",geometry.y_min);
set("y max",geometry.y_max);
set("z min",-100e-9);
set("z max",0);
set("material", "Si (Silicon) - Palik");

addrect;
set("name", "1-D grating");
set("x min",geometry.x_min/2);
set("x max",geometry.x_max/2);
set("y min",geometry.y_min);
set("y max",geometry.y_max);
set("z min", 0);
set("z max", 20e-9);
set("material", "Si (Silicon) - Palik");

# Add FDTD region
addfdtd;
set("x min",geometry.x_min);
set("x max",geometry.x_max);
set("y min",geometry.y_min);
set("y max",geometry.y_max); 
set("z min",geometry.z_min);
set("z max",geometry.z_max); 

# Define plane wave excitation
excitation = struct;
excitation.f =linspace(400,800,numFreqPoints)*1e12;
dimlessF = excitation.f*1e-12; # dimensionless frequencies
excitation.phi  = 0;
excitation.theta = 0;
excitation.direction = "backward";

# Other options
options={"max_N": 70}; # Largest number of k-vectors allowed
options.fields_monitor_x = linspace(-a/2,a/2,101);
options.fields_monitor_y = linspace(-a/2,a/2,101);
options.fields_monitor_z = [0];

# Run RCWA command
results = rcwa(geometry, excitation, options);
TE = results.TotalEnergy;
Rp = pinch(results.TotalEnergy.Rp);
Tp = pinch(results.TotalEnergy.Tp);
Ts = pinch(results.TotalEnergy.Ts);

# find three peak frequency for reference
peakIdx = findpeaks(Rp,2);  
peak_ref = sort(dimlessF(peakIdx));


# Plot transmission/reflection results 
plot(excitation.f*1e-12,Tp);
holdon;
plot(excitation.f*1e-12,Rp);
holdoff;
legend("Transmission", "Reflection");
setplot("x label", "Frequency (THz)");
setplot("y label", "Normalized Power");

# Plot electric field inside slab at z = 0 um
f_index = 1; # index of frequency point to use for field plot
Es = pinch(results.Fields.Es);
Es2 = abs(Es(:,:,f_index,1))^2 + abs(Es(:,:,f_index,2))^2 + abs(Es(:,:,f_index,3))^2; # get magnitude squared of Es field

# Plot transmission results 
image(options.fields_monitor_x*1e6, options.fields_monitor_y*1e6, Es2, "x (um)", "y (um)", "|Es|^2 at f = " + num2str(excitation.f(f_index)/1e12) + " THz and z = " + num2str(options.fields_monitor_z) + " um");

## Step 2
numKPointsvec = 10:5:70;
time_vec = zeros(length(numKPointsvec));
peak_pos = matrix(length(numKPointsvec),2); # peak positions

# Loop through number of k-vectors
for(iN = 1:length(numKPointsvec)){
    # Additional options for RCWA
    options={"max_N":numKPointsvec(iN) }; # Specify the largest number of k-vectors allowed
    
    
    # Run RCWA command
    t0 = now;
    results = rcwa(geometry, excitation, options);
    time_vec(iN) = now - t0;
    
    # Record the approximate peak positions
    Rp = results.TotalEnergy.Rp;
    peakIdx = findpeaks(Rp,2);  
    peak_pos(iN, :) = sort(dimlessF(peakIdx));
}

plot(numKPointsvec, abs(peak_pos(:,1) - peak_ref(1))/peak_ref(1),"Number of k-vectors","Error in peak frequencies","");
holdon;
plot(numKPointsvec, abs(peak_pos(:,2) - peak_ref(2))/peak_ref(2));
legend("Peak 1", "Peak 2");
holdoff;

# plot simulation time vs. number of k-vectors
plot(numKPointsvec, time_vec/1000, "Number of k-vectors", "Simulation time (s)");

##
## Step 3

# Update simulation parameters
excitation.theta = linspace(0, 30, 61);
options.max_N = 50;

# Run RCWA command
results = rcwa(geometry, excitation, options);
Tp = pinch(results.TotalEnergy.Tp);
Ts = pinch(results.TotalEnergy.Ts);
Rp = pinch(results.TotalEnergy.Rp);
Rs = pinch(results.TotalEnergy.Rs);

# Plot transmission results 
image(excitation.f*1e-12, excitation.theta, Tp, "Frequency (THz)", "Incident Angle (degrees)", "Transmission, P Polarization");
image(excitation.f*1e-12, excitation.theta, Ts, "Frequency (THz)", "Incident Angle (degrees)", "Transmission, S Polarization");
image(excitation.f*1e-12, excitation.theta, Rp, "Frequency (THz)", "Incident Angle (degrees)", "Reflection, P Polarization");
image(excitation.f*1e-12, excitation.theta, Rs, "Frequency (THz)", "Incident Angle (degrees)", "Reflection, S Polarization");




